package by.mksn.inintobot.test

import by.mksn.inintobot.currency.Currency
import by.mksn.inintobot.currency.CurrencyAliasMatcher
import by.mksn.inintobot.expression.Const
import by.mksn.inintobot.util.toFiniteBigDecimal
import kotlin.test.assertEquals


// @formatter:off
val testCurrencies = listOf(
    Currency(
        code = "BYN",
        emoji = "üáßüáæ",
        aliases = setOf("BYN", "BYR", "bel", "by", "br", "b", "–±—É–Ω", "–±—É–Ω–æ–≤", "–±—É–Ω—ã", "–±—É–Ω–∞", "–±—É–Ω–∞—Ö", "–±—É—Ä", "–±–µ–ª", "–±—Ä", "–±")
    ),
    Currency(
        code = "USD",
        emoji = "üá∫üá∏",
        aliases = setOf("USD", "us", "dollar", "dollars", "u", "d", "$", "–±–∞–∫—Å", "–±–∞–∫—Å—ã", "–±–∞–∫—Å–æ–≤", "–±–∞–∫—Å–∞", "–±–∞–∫—Å–∞—Ö", "–¥–æ–ª–ª–∞—Ä", "–¥–æ–ª–ª–∞—Ä—ã", "–¥–æ–ª–ª–∞—Ä–æ–≤", "–¥–æ–ª–ª–∞—Ä–∞", "–¥–æ–ª–ª–∞—Ä–∞—Ö", "–¥–æ–ª–ª", "–¥–æ–ª", "–¥", "—é—Å–¥")
    ),
    Currency(
        code = "EUR",
        emoji = "üá™üá∫",
        aliases = setOf("EUR", "euro", "eu", "e", "‚Ç¨", "–µ–≤—Ä–æ", "–µ–≤—Ä", "–µ—É—Ä", "–µ")
    ),
    Currency(
        code = "UAH",
        emoji = "üá∫üá¶",
        aliases = setOf("UAH", "grn", "gr", "ua", "‚Ç¥", "–≥—Ä–∏–≤–Ω", "–≥—Ä–∏–≤–Ω–∞", "–≥—Ä–∏–≤–Ω–∏", "–≥—Ä–∏–≤–Ω—ã", "–≥—Ä–∏–≤–Ω—è", "–≥—Ä–∏–≤–µ–Ω", "–≥—Ä–∏–≤–µ–Ω—å", "–≥—Ä–∏–≤–Ω—è—Ö", "–≥—Ä–Ω", "–≥—Ä", "–≥")
    ),
    Currency(
        code = "KZT",
        emoji = "üá∞üáø",
        aliases = setOf("KZT", "kz", "tenge", "—Ç–µ–Ω–≥–µ", "—Ç–µ–Ω–≥–∏", "—Ç–µ–Ω–≥", "—Ç–Ω–≥")
    )
)
// @formatter:on

@ExperimentalStdlibApi
val testCurrencyAliasMatcher = CurrencyAliasMatcher(testCurrencies)

@ExperimentalStdlibApi
fun String.toCurrency() = testCurrencyAliasMatcher.match(this)

@ExperimentalUnsignedTypes
val Int.asConst
    get() = Const(this.toFiniteBigDecimal())


@ExperimentalUnsignedTypes
val Double.asConst
    get() = Const(this.toFiniteBigDecimal())


@ExperimentalUnsignedTypes
val String.asConst
    get() = Const(this.toFiniteBigDecimal())


fun <E, C : Iterable<E>> assertEqualsOrdered(expected: C, actual: C) {
    val expectedSeq = expected.asSequence()
    val actualSeq = actual.asSequence()
    assertEquals(expectedSeq.count(), actualSeq.count(), "Given collections have different size!")
    expectedSeq.zip(actualSeq).forEachIndexed { index, (expected, actual) ->
        assertEquals(expected, actual, "Elements at index $index are not same!")
    }
}

fun <E, C : Iterable<E>> assertEqualsUnordered(expected: C, actual: C) {
    assertEquals(expected.asSequence().count(), actual.asSequence().count(), "Given collections have different size!")
    expected.forEachIndexed { index, expectedElem ->
        assertEquals(
            expectedElem, actual.find { expected == it },
            "Expected element at index $index not found in actual collection!"
        )
    }
}