package by.mksn.inintobot.grammar

import by.mksn.inintobot.currency.Currency
import by.mksn.inintobot.currency.CurrencyAliasMatcher
import by.mksn.inintobot.expression.*
import com.github.h0tk3y.betterParse.grammar.parseToEnd
import com.ionspin.kotlin.bignum.decimal.toBigDecimal
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue

@ExperimentalStdlibApi
@ExperimentalUnsignedTypes
class BotInputGrammarTest {

    // @formatter:off
    private val currencies = setOf(
        Currency(
            code = "BYN",
            emoji = "üáßüáæ",
            aliases = setOf("BYN", "BYR", "bel", "by", "br", "b", "–±—É–Ω", "–±—É–Ω–æ–≤", "–±—É–Ω—ã", "–±—É–Ω–∞", "–±—É–Ω–∞—Ö", "–±—É—Ä", "–±–µ–ª", "–±—Ä", "–±")
        ),
        Currency(
            code = "USD",
            emoji = "üá∫üá∏",
            aliases = setOf("USD", "us", "dollar", "dollars", "u", "d", "$", "–±–∞–∫—Å", "–±–∞–∫—Å—ã", "–±–∞–∫—Å–æ–≤", "–±–∞–∫—Å–∞", "–±–∞–∫—Å–∞—Ö", "–¥–æ–ª–ª–∞—Ä", "–¥–æ–ª–ª–∞—Ä—ã", "–¥–æ–ª–ª–∞—Ä–æ–≤", "–¥–æ–ª–ª–∞—Ä–∞", "–¥–æ–ª–ª–∞—Ä–∞—Ö", "–¥–æ–ª–ª", "–¥–æ–ª", "–¥", "—é—Å–¥")
        ),
        Currency(
            code = "EUR",
            emoji = "üá™üá∫",
            aliases = setOf("EUR", "euro", "eu", "e", "‚Ç¨", "–µ–≤—Ä–æ", "–µ–≤—Ä", "–µ—É—Ä", "–µ")
        ),
        Currency(
            code = "UAH",
            emoji = "üá∫üá¶",
            aliases = setOf("UAH", "grn", "gr", "ua", "‚Ç¥", "–≥—Ä–∏–≤–Ω", "–≥—Ä–∏–≤–Ω–∞", "–≥—Ä–∏–≤–Ω–∏", "–≥—Ä–∏–≤–Ω—ã", "–≥—Ä–∏–≤–Ω—è", "–≥—Ä–∏–≤–µ–Ω", "–≥—Ä–∏–≤–µ–Ω—å", "–≥—Ä–∏–≤–Ω—è—Ö", "–≥—Ä–Ω", "–≥—Ä", "–≥")
        )
    )
    // @formatter:on

    private val currencyAliasMatcher = CurrencyAliasMatcher(currencies)
    private val grammar = BotInputGrammar(TokenNames.DEFAULT, currencyAliasMatcher)

    @Suppress("PrivatePropertyName")
    private val Int.Const
        get() = Const(this.toBigDecimal())

    @Suppress("PrivatePropertyName")
    private val Double.Const
        get() = Const(this.toBigDecimal())

    @Test
    fun single_value() {
        val input = "1"
        val expectedExpr = 1.Const

        val (actualExpr, additionalCurrencies) = grammar.parseToEnd(input)

        assertTrue(additionalCurrencies.isEmpty())
        assertEquals(expectedExpr, actualExpr)
    }

    @Test
    fun simple_expression_1() {
        val input = "1 + 1"
        val expectedExpr = Add(1.Const, 1.Const)

        val (actualExpr, additionalCurrencies) = grammar.parseToEnd(input)

        assertTrue(additionalCurrencies.isEmpty())
        assertEquals(expectedExpr, actualExpr)
    }

    @Test
    fun simple_expression_2() {
        val input = "1 * 1"
        val expectedExpr = Multiply(1.Const, 1.Const)

        val (actualExpr, additionalCurrencies) = grammar.parseToEnd(input)

        assertTrue(additionalCurrencies.isEmpty())
        assertEquals(expectedExpr, actualExpr)
    }

    @Test
    fun simple_expression_3() {
        val input = "1 * 1 + 2"
        val expectedExpr = Add(
            Multiply(
                1.Const,
                1.Const
            ), 2.Const
        )

        val (actualExpr, additionalCurrencies) = grammar.parseToEnd(input)

        assertTrue(additionalCurrencies.isEmpty())
        assertEquals(expectedExpr, actualExpr)
    }

    @Test
    fun expression_with_brackets_1() {
        val input = "(1 * 1) / (7 - 2)"
        val expectedExpr = Divide(
            Multiply(
                1.Const,
                1.Const
            ), Subtract(7.Const, 2.Const)
        )

        val (actualExpr, additionalCurrencies) = grammar.parseToEnd(input)

        assertTrue(additionalCurrencies.isEmpty())
        assertEquals(expectedExpr, actualExpr)
    }

    @Test
    fun expression_with_brackets_2() {
        val input = "(1 + (2 - 1)) * ((7 - 2) / 2)"
        val expectedExpr = Multiply(
            Add(
                1.Const,
                Subtract(2.Const, 1.Const)
            ),
            Divide(
                Subtract(
                    7.Const,
                    2.Const
                ), 2.Const
            )
        )

        val (actualExpr, additionalCurrencies) = grammar.parseToEnd(input)

        assertTrue(additionalCurrencies.isEmpty())
        assertEquals(expectedExpr, actualExpr)
    }

    @Test
    fun value_with_different_currency() {
        val input = "1 –≥—Ä–∏–≤–Ω–∞"
        val currency = currencyAliasMatcher.matchToCode("UAH")
        val expectedExpr = CurrenciedExpression(1.Const, currency)

        val (actualExpr, additionalCurrencies) = grammar.parseToEnd(input)

        assertTrue(additionalCurrencies.isEmpty())
        assertEquals(expectedExpr, actualExpr)
    }

    @Test
    fun simple_expression_with_different_currency() {
        val input = "1 + 1 –≥—Ä–∏–≤–Ω–∞"
        val currency = currencyAliasMatcher.matchToCode("UAH")
        val expectedExpr = CurrenciedExpression(
            Add(
                1.Const,
                1.Const
            ), currency
        )

        val (actualExpr, additionalCurrencies) = grammar.parseToEnd(input)

        assertTrue(additionalCurrencies.isEmpty())
        assertEquals(expectedExpr, actualExpr)
    }
}